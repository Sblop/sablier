openapi: '3.1.0'

info:
  title: Sablier
  version: 2.0.0
  description: Start your workloads for a given duration
  contact:
    url: https://www.alexiscouvreur.fr
    name: Alexis Couvreur
    email: alexiscouvreur.pro@gmail.com
  license:
    name: GNU AFFERO GENERAL PUBLIC LICENSE Version 3
    url: https://www.gnu.org/licenses/agpl-3.0.en.html

servers:
  - url: "http://localhost:10000/api"

paths:
  "/sessions-blocking-by-names":
    post:
      operationId: requestSessionBlockingByNames
      summary: Request a session creation by names
      description: |-
        Request a blocking session creation by names. It will start all specified instances and will hang the request until 
        all are running (or exceeds the timeout).
        Everytime this endpoint is reached, each requested instances duration is extended.
        Reverse proxies can use the X-Sablier-Status header to know if it should proceed with the instance routing.
      requestBody:
        $ref: "#/components/requestBodies/BlockingSessionRequestByNames"
      responses:
        200:
          $ref: "#/components/responses/BlockingSessionRequestResponse"

  "/sessions-blocking-by-group":
    post:
      operationId: requestSessionBlockingByGroup
      summary: Request a blocking session creation by group
      description: |-
        Request a blocking session creation by group. It will start all instances associated to the group and will hang the 
        request until all are running (or exceeds the timeout).
        Everytime this endpoint is reached, each requested instances duration is extended.
        Reverse proxies can use the X-Sablier-Status header to know if it should proceed with the instance routing.
      requestBody:
        $ref: "#/components/requestBodies/BlockingSessionRequestByGroup"
      responses:
        200:
          $ref: "#/components/responses/BlockingSessionRequestResponse"
        404:
          description: "The requested group does not exist"
  /sessions-dynamic-by-names:
    post:
      operationId: requestSessionDynamicByNames
      summary: Request a dynamic session creation by names
      description: |-
        Request a dynamic session creation by names. It will start all specified instances and return immediately with 
        a waiting page that can be configured (theme).
        Everytime this endpoint is reached, each requested instances duration is extended.
        Reverse proxies can use the X-Sablier-Status header to know if it should proceed with the instance routing.
      requestBody:
        $ref: "#/components/requestBodies/DynamicSessionRequestByNames"
      responses:
        200:
          $ref: "#/components/responses/DynamicSessionRequestResponse"
  /sessions-dynamic-by-group:
    post:
      operationId: requestSessionDynamicByGroup
      summary: Request a dynamic session creation by group
      description: |-
        Request a session creation by group. It will start all instances associated to the group and will hang the 
        request until all are running (or exceeds the timeout).
        Everytime this endpoint is reached, each requested instances duration is extended. 
        Reverse proxies can use the X-Sablier-Status header to know if it should proceed with the instance routing.
      requestBody:
        $ref: "#/components/requestBodies/DynamicSessionRequestByGroup"
      responses:
        200:
          $ref: "#/components/responses/DynamicSessionRequestResponse"
        404:
          description: "The requested group does not exist"
  /version:
    get:
      operationId: getVersion
      responses:
        200:
          description: "Build and version information of Sablier"
          content:
            application/json:
              schema:
                type: object
                properties:
                  branch:
                    type: string
                    description: "The branch from which the release was built"
                  buildDate:
                    type: string
                    description: "When the release was built"
                  buildUser:
                    type: string
                    description: "Who built the release"
                  goVersion:
                    type: string
                    description: "The golang version"
                  platform:
                    type: string
                    description: "The binary format architecture"
                  program:
                    type: string
                    description: "When the release was built"
                  revision:
                    type: string
                    description: "The git commit SHA"
                  version:
                    type: string
                    description: "The semantic version (SemVer)"
                    externalDocs:
                      url: "https://semver.org/"

  /health:
    get:
      operationId: healthcheck
      description: Endpoint to query to know if the application is healthy or not
      responses:
        200:
          description: "The application is able to receive and handle requests"
          content:
            text/plain:
              example: "200"
        503:
          description: "The application terminating gracefully and won't accept new requests"
          content:
            text/plain:
              example: "503"

  /themes:
    get:
      operationId: listThemes
      responses:
        200:
          description: "List default and custom themes"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /themes/{theme}:
    get:
      description: "Preview a theme by having fake data for 3 instances, one running, one starting and one in error."
      operationId: previewTheme
      parameters:
        - in: path
          name: theme
          required: true
          schema:
            type: string
          description: The theme to preview
      responses:
        200:
          $ref: "#/components/responses/DynamicSessionRequestResponse"
        404:
          description: "The requested theme does not exist"

  /instances:
    get:
      operationId: listInstances
      responses:
        200:
          description: "List all known instances and their statuses"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Instance"
  /groups:
    get:
      operationId: listGroups
      responses:
        200:
          description: "List all discovered groups and their related instances"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"

components:
  requestBodies:
    BlockingSessionRequestByNames:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - names
            properties:
              names:
                type: array
                items:
                  type: string
                example:
                  - nginx
                  - whoami
              sessionDuration:
                $ref: "#/components/schemas/Duration"
              timeout:
                $ref: "#/components/schemas/Duration"
              desiredReplicas:
                type: integer
                minimum: 1

    BlockingSessionRequestByGroup:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - group
            properties:
              group:
                type: string
                example: "default"
              sessionDuration:
                $ref: "#/components/schemas/Duration"
              timeout:
                $ref: "#/components/schemas/Duration"
              desiredReplicas:
                type: integer
                minimum: 1

    DynamicSessionRequestByNames:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - names
            properties:
              names:
                type: array
                items:
                  type: string
                example:
                  - nginx
                  - whoami
              sessionDuration:
                $ref: "#/components/schemas/Duration"
              theme:
                type: string
                example: "hacker-terminal"
              themeOptions:
                type: object
                properties:
                  title:
                    type: string
                    example: "Sablier"
                  displayName:
                    type: string
                    example: "my apps"
                  showDetails:
                    type: boolean
                  refreshFrequency:
                    $ref: "#/components/schemas/Duration"
              desiredReplicas:
                type: integer
                minimum: 1
                example: 1

    DynamicSessionRequestByGroup:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - group
            properties:
              group:
                type: string
                example: "default"
              sessionDuration:
                $ref: "#/components/schemas/Duration"
              theme:
                type: string
                example: "hacker-terminal"
              themeOptions:
                type: object
                properties:
                  title:
                    type: string
                    example: "Sablier"
                  displayName:
                    type: string
                    example: "my apps"
                  showDetails:
                    type: boolean
                  refreshFrequency:
                    $ref: "#/components/schemas/Duration"
              desiredReplicas:
                type: integer
                minimum: 1
                example: 1

  responses:
    BlockingSessionRequestResponse:
      description: "A JSON response that displays the status of the requested instances."
      headers:
        X-Sablier-Status:
          $ref: "#/components/headers/X-Sablier-Status"
      content:
        application/json:
          schema:
            type: object
            properties:
              instances:
                type: array
                items:
                  $ref: "#/components/schemas/Instance"

    DynamicSessionRequestResponse:
      description: "An HTML page that self-refreshes and displays the status of the requested instances."
      headers:
        X-Sablier-Status:
          $ref: "#/components/headers/X-Sablier-Status"
      content:
        text/html:
          example: |-
            <html lang="en">
            <head>
              <title>Sablier</title>
              <meta http-equiv="refresh" content="5" />
            </head>
            <body>
              Starting my apps
              Your instances will stop after 10 minutes of inactivity
              <table>
                <tr>
                  <td>starting-instance</td>
                  <td>instance is starting...</td>
                </tr>
                <tr>
                  <td>started-instance</td>
                  <td>instance is started.</td>
                </tr>
                <tr>
                  <td>error-instance</td>
                  <td>instance does not exist</td>
                </tr>
              </table>
            </body>
            </html>
  

  headers:
    X-Sablier-Status:
      description: "Represents the readiness of the requested session. For a session to be considered 'ready', every instances must be 'running'."
      schema:
        type: string
        enum:
          - "ready"
          - "not-ready"

  schemas:
    Duration:
      type: string
      externalDocs:
        url: "https://pkg.go.dev/time#ParseDuration"
      format: duration
      example: "1h"
      minLength: 1
    Instance:
      type: object
      properties:
        name:
          type: string
          example: "nginx"
        status:
          type: string
          enum:
            - "starting"
            - "running"
            - "error"
          example: "error"
        error:
          type: string
          example: "container \"nginx\" does not exist"
    Group:
      type: object
      properties:
        name:
          type: string
        instances:
          type: array
          items:
            $ref: "#/components/schemas/Instance"